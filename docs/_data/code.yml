- title: "Getting Started"
  url: "/quick-start/"
- title: "Code"
  url: "/code/"
  dropdown: 
  - title: "Interface functions"
    url: "/interface-functions/"
    functions: 
    - title: "computeNucleiCenters"
      teaser: "Declump the nuclei in an image"
      definitions: 
      - def: "[BW,cuts,Info] = computeNucleiCenters(I,BW,options)"
    - title: "computeObjectSeedPoints"
      teaser: "Compute the seed points for a single object"
      definitions: 
      - def: "[seedPoints, Info] = computeObjectSeedPoints(binned_data, M, r0set, useCentroid, options, objNumber)"
    - title: "seedPointOptions"
      teaser: "Set options needed for computing seed point locations."
      definitions: 
      - def: "defaultValues = seedPointOptions()"
    - title: "setup"
      teaser: 
    - title: "simplest_test"
      teaser: "======================================================================"
  - title: "Core functions"
    url: "/core-functions/"
    functions: 
    - title: "extractClusterCenters"
      teaser: "Extract the center and the number of particles in particle cluster."
      definitions: 
      - def: "[clusterCenters, clusterSize] = extractClusterCenters(r_final,options)"
    - title: "interactingParticleSystem"
      teaser: "Compute the change in particle states dy=[dr/dt, dp/dt] from the current states y=[r, p]."
      definitions: 
      - def: "dy = interactingParticleSystem(t,y,extraInputs)"
    - title: "interactingParticleSystem_convergeEvent"
      teaser: "Determine if the particle system has converged by checking if the mean particle speed is below some threshold."
      definitions: 
      - def: "[value, isterminal, direction] = interactingParticleSystem_convergeEvent(t,y,m,hstry,D)"
    - title: "modelParticleDynamics"
      teaser: "Model particles confined in potential with gradient dV and initial positions r0 and return their approximate equilibrium positions."
      definitions: 
      - def: "r = modelParticleDynamics(dV,r0,options)\n[r, Info] = modelParticleDynamics(dV,r0,options)"
    - title: "ode_history"
      teaser: "A class for storing an ODE solution at previous time steps while solving. Use the history with an ODE 'Events' function to catch more complex behavior than can be determined with only the current solution."
      definitions: 
      - def: "history = ode_history(t0, y0, history_size)"
  - title: "Setup functions"
    url: "/setup-functions/"
    functions: 
    - title: "computeInitialPoints"
      teaser: "Generate a set of initial particle locations for modeling."
      definitions: 
      - def: "r0 = computeInitialPoints(BW,options)\n[r0,Info] = computeInitialPoints(BW,options,'r0set',r0set,'problem_scales',problem_scales)"
    - title: "confiningForce"
      teaser: "Compute the potential force and return a function handle that takes in particle positions and returns the potential force at those positions."
      definitions: 
      - def: "dV = confiningForce(V, problem_scales, options)"
    - title: "create_scaleInvar_confining_potential"
      teaser: "Compute the confining potential based on the distance transform of a binary mask."
      definitions: 
      - def: "[V, scaleFactor] = create_scaleInvar_confining_potential(BW,options)"
    - title: "setup_problem"
      teaser: "Generate the confining force, the initial particle locations, and the scaling factors for the simulation."
      definitions: 
      - def: "[dV, r0, problem_scales, V, Info] = setup_problem(binned_data, data_range, options)\n[dV, r0, problem_scales, V, Info] = setup_problem(binned_data, data_range, options, r0set)"
  - title: "Utilities"
    url: "/utility-functions/"
    functions: 
    - title: "binData"
      teaser: "Bin N-D scatter point data."
      definitions: 
      - def: "[n, cents, sz, data_limits] = binData(X, nbins, density_threshold, smooth_data, maintain_aspectRatio)"
    - title: "cart2hex"
      teaser: "Convert from cartesian points to hexagon center points."
      definitions: 
      - def: "[hx,hy] = cart2hex(cp,a,b)"
    - title: "computeBoundaryInformation"
      teaser: "Compute the boundary contours, inward pointing normal vectors, curvature, and centers of curvature."
      definitions: 
      - def: "[B,n,curvature,curvatureCenters] = computeBoundaryInformation(BW,objectScale,options)"
    - title: "computePotentialParameters"
      teaser: "Solve for the potential parameters that result in the potential depth, potential minimum location, and potential attractive extent given."
      definitions: 
      - def: "parameterStruct = computePotentialParameters(depths,minimum_Locations,extents,file)"
    - title: "computeProblemScales"
      teaser: "Compute the scale factors and data transformations for the problem."
      definitions: 
      - def: "problem_scales = computeProblemScales(options, grid_size, data_limits)"
    - title: "compute_objectScale"
      teaser: "Compute the maximum distance transform value for each object in a binary mask."
      definitions: 
      - def: "objectScale = compute_objectScale(BW, pixelList)"
    - title: "createObjectImages"
      teaser: "Create full images with N rows from a pixel list and sets of values."
      definitions: 
      - def: "varargout = createObjectImages(pixelList, N, varargin)\n[Aimg, Bimg] = createObjectImages(pixelList, N, A, B)"
    - title: "create_test_3D_object"
      teaser: "Create a fake set of 3D data for testing based off of the example nuclei image, testNuclei_mask."
      definitions: 
      - def: "dat = create_test_3D_object(N)"
    - title: "decimateData"
      teaser: "Bin 2D spatial data and return a single value for each bin."
      definitions: 
      - def: "dcmt = decimateData(x,y,z)\ndcmt = decimateData(x,y,z,'binSize',vS,'gridType',type,'reductionMethod',method,'cleanHexagonData',tf,'generatePlots',tf)"
    - title: "displayProgress"
      teaser: "Class to help with displaying progress during calculation."
      definitions: 
      - def: "progress = displayProgress(num_iterations, num_updates, active, is_parallel)"
    - title: "frequencyGaussianFilter"
      teaser: "Filter data with a Gaussian filter in frequency space."
      definitions: 
      - def: "A = frequencyGaussianFilter(A, sigma, hsize, padding)"
    - title: "getCurvatureAndCenters"
      teaser: "Compute boundary curvature and centers of curvature."
      definitions: 
      - def: "[kappa,CoC_linIdx,negKappaInds,d_bndry,CoC,kappa_s] = getCurvatureAndCenters(BWperim,imSize,sigma,maxRadius,useConvexHull)"
    - title: "getGridWignerSeitz"
      teaser: "Convert the Wigner-Seitz radius to grid space."
      definitions: 
      - def: "rs = getGridWignerSeitz(problem_scales, options)"
    - title: "getObjectOfInterest"
      teaser: "Return the options.Object_Of_Interest elements of the input arrays."
      definitions: 
      - def: "varargout = getObjectOfInterest(options, varargin)\n[A, B, C] = getObjectOfInterest(options, A_in, B_in, C_in)\nA = A_in(options.Object_Of_Interest)"
    - title: "getPdistInds"
      teaser: "Get the indices of the pairs formed by pdist()."
      definitions: 
      - def: "inds = getPdistInds(N)"
    - title: "get_minimum_uint_class"
      teaser: "Return the class name for the smallest unsigned integer class that will hold the input without overflow."
      definitions: 
      - def: "class_name = get_minimum_uint_class(A)"
    - title: "get_overlap_factor"
      teaser: "Compute the expected overlap factor of the sub-objects for each object in the binary mask BW."
      definitions: 
      - def: "overlap_factors = get_overlap_factor(BW)"
    - title: "hex2cart"
      teaser: "Convert from hexagon center points to Cartesian points."
      definitions: 
      - def: "[cpx,cpy] = hex2cart(hx,a,b)"
    - title: "hexplot"
      teaser: "Create a hexagonal scatter plot."
      definitions: 
      - def: "p = hexplot(cartCents,a,b)\np = hexplot(cartCents,a,b,'colorData',cd,'sizeData',sd,'colorScale',cs,'sizeScale',ss,'maxHexSize',mhs,'orientation',o,'parent',p)"
    - title: "interp2mex"
      teaser: "Fast 2-D bilinear interpolation"
      definitions: 
      - def: "Zi = interp2mex(Z, Xi, Yi)"
    - title: "is_in_parallel"
      teaser: "Determine if function is being run in parallel."
      definitions: 
      - def: "answer = is_in_parallel()"
    - title: "isosurfaceProjectionPlot"
      teaser: "Plot isosurfaces of N-D data (N>2) projected down to 3-D, and plot the 2-D projections of the isosurfaces to the three axis planes."
      definitions: 
      - def: "fig = isosurfaceProjectionPlot(n, dims, isoLvls)"
    - title: "nakeinterp1"
      teaser: "Fast 1D interpolation using a dichotomy search of indices."
      definitions: 
      - def: "idx = nakeinterp1(x, y, xi);"
    - title: "ndGaussianFilter"
      teaser: "Create an N-D Gaussian filter."
      definitions: 
      - def: "h = ndGaussianFilter(N,sigma,hsize)"
    - title: "publishDocumentation"
      teaser: "Function to create the documentation data used in creating the website."
      definitions: 
      - def: "publishDocumentation()"
    - title: "publishExample"
      teaser: "Function to publish an example script to markdown for the website."
      definitions: 
      - def: "publishExample(file)\npublishExample(file, reEvaluate)"
    - title: "removePadding"
      teaser: "Remove padding from and N-D matrix."
      definitions: 
      - def: "A = removePadding(A, pad_size)"
    - title: "setTheme"
      teaser: "Set a figure theme to light or dark."
      definitions: 
      - def: "setTheme(fig,darkLight)"
    - title: "sizeof"
      teaser: "Get the size in bytes of the input numeric class."
      definitions: 
      - def: "out = sizeof(in)"
- title: "Examples"
  url: "/examples/"
